// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  VOLUNTEER
  ADMIN
}

enum TokenType {
  RECOVER_EMAIL
}

enum Occupation {
  VOLUNTEER
  // TODO COMPLETE LIST
}

enum AssistedFamilyGroup {
  // TODO CORRECT NAMES NOT ABBREVIATIONS
  AE
  AEF
}

enum OfferorFamilyGroup {
  CHURCH
  COMMUNITY
  EXTERNAL
}

// Models
model User {
  id                 String   @id @default(uuid())
  firstName          String
  lastName           String?
  email              String   @unique
  hashedPassword     String
  role               Role     @default(VOLUNTEER)
  avatar             String?
  lastAccess         DateTime @default(now())
  hashedRefreshToken String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  Logs    Log[]
  field   Field?  @relation(fields: [fieldId], references: [id])
  fieldId String?

  @@map("users")
}

model Log {
  id         String   @id @default(uuid())
  ip         String
  method     String
  url        String
  body       Json?
  files      String[]
  query      String?
  statusCode String

  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime  @default(now())
  deleted   DateTime?

  @@map("logs")
}

model Token {
  id        String    @id @default(uuid())
  token     String
  email     String
  used      Boolean   @default(false)
  tokenType TokenType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  @@map("tokens")
}

model File {
  id       String @id @default(uuid())
  name     String
  mimeType String
  size     Int

  createdAt DateTime  @default(now())
  deleted   DateTime?

  @@map("files")
}

model Field {
  id               String   @id @default(uuid())
  continent        String
  country          String
  state            String
  abbreviation     String
  designation      String
  mapLocation      Json? // MapOptions
  mapArea          Json[] // PolygonOptions
  collectionPoints Json[] // CollectionPoints
  streetRelation   String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  User                 User[]
  Volunteer            Volunteer[]
  Agenda               Agenda[]
  AssistedFamily       AssistedFamily[]
  Church               Church[]
  Collaborator         Collaborator[]
  Announcement         Announcement[]
  OfferorFamily        OfferorFamily[]
  Report               Report[]
  Testimonial          Testimonial[]
  MonthlyMonetaryOffer MonthlyMonetaryOffer[]
  MonthlyFoodOffer     MonthlyFoodOffer[]
  MonthlyMiscOffer     MonthlyMiscOffer[]

  @@map("fields")
}

// AdministrativeVolunteer in the old scheema
model Volunteer {
  id         String     @id @default(uuid())
  firstName  String
  lastName   String?
  email      String?
  avatar     String?
  joinedDate DateTime
  occupation Occupation @default(VOLUNTEER)
  church     String?
  priest     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("volunteers")
}

model Agenda {
  id          String   @id @default(uuid())
  title       String
  message     String
  attachments String[]
  date        DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("agenda")
}

model AssistedFamily {
  id             String              @id @default(uuid())
  representative String
  period         String
  group          AssistedFamilyGroup

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("assistedFamilies")
}

model Church {
  id          String @id @default(uuid())
  name        String
  description String
  image       String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("churches")
}

model Collaborator {
  id          String  @id @default(uuid())
  firstName   String
  lastName    String?
  image       String?
  description String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("collaborators")
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  message     String
  attachments String[]
  date        DateTime
  fixed       Boolean  @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("announcements")
}

model OfferorFamily {
  id             String             @id @default(uuid())
  representative String
  commitment     String
  denomination   String?
  group          OfferorFamilyGroup

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("offerorFamilies")
}

model Report {
  id               String   @id @default(uuid())
  title            String
  text             String?
  shortDescription String
  attachments      String[]
  date             DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("reports")
}

model Testimonial {
  id    String @id @default(uuid())
  name  String
  email String
  text  String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("testimonials")
}

model MonthlyMonetaryOffer {
  id                String @id @default(uuid())
  month             Int
  year              Int
  openingBalance    Float
  offersValue       Float
  offersDescription String
  spentValue        Float
  spentDescription  String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("monthlyMonetaryOffers")
}

model MonthlyFoodOffer {
  id                          String @id @default(uuid())
  month                       Int
  year                        Int
  food                        String
  communityCollection         Int
  communityCollectionExternal Int
  communityCollectionExtra    Int
  churchCollection            Int
  churchCollectionExternal    Int
  churchCollectionExtra       Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("monthlyFoodOffers")
}

model MonthlyMiscOffer {
  id          String @id @default(uuid())
  month       Int
  year        Int
  title       String
  description String
  destination String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@map("monthlyMiscOffers")
}
